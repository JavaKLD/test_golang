// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Medical schedule API
 *
 * API для работы с расписанием приемов лекарств
 *
 * API version: 1.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"errors"
	"io"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) *DefaultAPIController {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"GetSchedule": Route{
			strings.ToUpper("Get"),
			"/schedule",
			c.GetSchedule,
		},
		"CreateSchedule": Route{
			strings.ToUpper("Post"),
			"/schedule",
			c.CreateSchedule,
		},
		"GetUserSchedule": Route{
			strings.ToUpper("Get"),
			"/schedules",
			c.GetUserSchedule,
		},
		"GetNextTakings": Route{
			strings.ToUpper("Get"),
			"/next_takings",
			c.GetNextTakings,
		},
	}
}

// GetSchedule - Получить расписание по ID
func (c *DefaultAPIController) GetSchedule(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var userIdParam int32
	if query.Has("user_id") {
		param, err := parseNumericParameter[int32](
			query.Get("user_id"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "user_id", Err: err}, nil)
			return
		}

		userIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "user_id"}, nil)
		return
	}
	var scheduleIdParam int32
	if query.Has("schedule_id") {
		param, err := parseNumericParameter[int32](
			query.Get("schedule_id"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "schedule_id", Err: err}, nil)
			return
		}

		scheduleIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "schedule_id"}, nil)
		return
	}
	result, err := c.service.GetSchedule(r.Context(), userIdParam, scheduleIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateSchedule - Создать расписание приемов лекарства
func (c *DefaultAPIController) CreateSchedule(w http.ResponseWriter, r *http.Request) {
	var scheduleRequestParam ScheduleRequest
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&scheduleRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertScheduleRequestRequired(scheduleRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertScheduleRequestConstraints(scheduleRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateSchedule(r.Context(), scheduleRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUserSchedule - Получить расписание пользователя
func (c *DefaultAPIController) GetUserSchedule(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var userIdParam int32
	if query.Has("user_id") {
		param, err := parseNumericParameter[int32](
			query.Get("user_id"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "user_id", Err: err}, nil)
			return
		}

		userIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "user_id"}, nil)
		return
	}
	result, err := c.service.GetUserSchedule(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetNextTakings - Получить график на следующие приемы лекарств
func (c *DefaultAPIController) GetNextTakings(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var userIdParam int32
	if query.Has("user_id") {
		param, err := parseNumericParameter[int32](
			query.Get("user_id"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "user_id", Err: err}, nil)
			return
		}

		userIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "user_id"}, nil)
		return
	}
	result, err := c.service.GetNextTakings(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
